--- The Lua binding of EJDB database.<br/>
-- <a href="http://ejdb.org">http://ejdb.org</a>
-- @usage
-- -- File: samples/sample1.lua
--
--  local ejdb = require("ejdb")
--  local inspect = require("ejdb.inspect")
--  local Q = ejdb.Q
--
--  -- Used modes:
--  -- 'r' - read
--  -- 'w' - write
--  -- 'c' - create db if not exists
--  -- 't' - truncate existing db
--  local db = ejdb.open("zoo", "rwct")
--
--  -- Unordered lua table
--  local parrot1 = {
--    name = "Grenny",
--    type = "African Grey",
--    male = true,
--    age = 1,
--    birthhdate = ejdb.toDateNow(),
--    likes = { "green color", "night", "toys" },
--    extra1 = ejdb.toNull()
--  }
--
--  -- Preserve order of BSON keys
--  local parrot2 = Q();
--  parrot2:KV("name", "Bounty"):KV("type", "Cockatoo"):KV("male", false)
--  parrot2:KV("age", 15):KV("birthdate",
--                        ejdb.toDate({ year = 2013, month = 1, day = 1,
--                                      hour = 0, sec = 1 }))
--  parrot2:KV("likes", { "sugar cane" }):KV("extra1", ejdb.toNull())
--
--  --IF YOU WANT SOME DATA INSPECTIONS:
--  --print(ejdb.print_bson(parrot2:toBSON()))
--  --local obj = ejdb.from_bson(parrot2:toBSON())
--  --print(inspect(obj));
--
--  db:save("parrots2", parrot1)
--  db:save("parrots2", parrot2)
--
--  -- Below two equivalent queries:
--  -- Q1
--  local res, count, log =
--  db:find("parrots2", Q("likes", "toys"):OrderBy("name asc", "age desc"))
--  for i = 1, #res do -- iterate one
--    local ob = res:object(i)
--    print("" .. ob["name"] .. " likes toys #1")
--  end
--
--  -- Q2
--  local res, count, log =
--  db:find("parrots2", Q():F("likes"):Eq("toys"):OrderBy({ name = 1 }, { age = -1 }))
--  for i = 1, #res do -- iterate one
--    print("" .. res:field(i, "name") .. " likes toys #2")
--  end
--
--  -- Second way to iterate
--  for vobj, idx in res() do
--    print("" .. vobj["name"] .. " likes toys #3")
--  end
--
--  db:close()

module("ejdb")

local ejdb = {}

--- Query/JSON builder is used to create EJDB queries or JSON objects with
-- preserverd keys order (Unlike lua tables).
-- @{Q} **can be used to construct BSON objects as well as queries.**
-- @class table
-- @name Q
--
-- Examples:
-- @usage Q("foo", "bar")
-- @usage Q("likes", "toys"):OrderBy("name asc", "age desc")
-- @usage Q("name", "Andy"):F("_id"):Eq("510f7fa91ad6270a00000000"):F("age"):Gt(20):Lt(40):F("score"):In({ 11, 22.12333, 1362835380447, db.toNull() }):Max(232)
-- @usage Q():Or(Q("foo", "bar"), Q("foo", "bar6")):OrderBy({ foo = 1 })
-- @see Q:KV
-- @see Q:F
-- @see Q:Eq
-- @see Q:ElemMatch
-- @see Q:Not
-- @see Q:Gt
-- @see Q:Gte
-- @see Q:Lt
-- @see Q:Lte
-- @see Q:Icase
-- @see Q:Begin
-- @see Q:In
-- @see Q:NotIn
-- @see Q:Bt
-- @see Q:StrAnd
-- @see Q:StrOr
-- @see Q:Inc
-- @see Q:Set
-- @see Q:AddToSet
-- @see Q:AddToSetAll
-- @see Q:Pull
-- @see Q:PullAll
-- @see Q:Upsert
-- @see Q:Upsert
-- @see Q:DropAll
-- @see Q:Join
-- @see Q:Or
-- @see Q:Skip
-- @see Q:Skip
-- @see Q:Max
-- @see Q:OrderBy
-- @see Q:Fields
-- @see Q:Fields
-- @see Q:NotFields
--
local Q = {}

---
-- Database itself.
-- @class table
-- @name DB
local DB = {}

---
-- Result set cursor object.
-- @class table
-- @name RS
-- Usage:
--    #res - length of result set
--    res[i] - BSON representations of object as lua string
--    res:object(i) - Lua table constructed from BSON data
--    res:field(i, <field name>) - Lua value of fetched BSON object
--    res() - Creates iterator for pairs (obj, idx)
--          where obj - Lua table constructed from BSON data
--                idx - Index of fetched object in the result set
--
-- Examples:
--    for i = 1, #res do
--      local ob = res:object(i)
--      ...
--    end
--
-- OR
--
--    for i = 1, #res do
--      res:field(i, "json field name")
--      ...
--    end
--
-- OR
--
--    for vobj, idx in res() do
--      -- vobj is a lua table representation of fetched json object
--      vobj["json field name"]
--      ...
--    end
-- @see RS:object
-- @see RS:field
local RS = {}

--- Opens EJDB database.
-- @usage local db = ejdb.open("foodb", "wrc")
-- @tparam string path Database main file
-- @tparam ?string mode Database open mode flags:<br/>
-- <code>`w`</code> Open as a writer <br/>
-- <code>`r`</code> Open as a reader <br/>
-- <code>`c`</code> Create db if it not exists <br/>
-- <code>`t`</code> Truncate existing db <br/>
-- <code>`s`</code> Sycn db after each transaction <br/>
-- Default open mode: <code>`rwcs`</code>
-- @return Database table
--
function ejdb.open(path, mode) end

--- Closes opened database.
function ejdb.close() end

--- Converts string OID into BSON oid table.
-- @tparam string val 24 hex chars BSON_OID
function ejdb.toOID(val) end

--- Converts os.time table (or number of seconds since epoch) into BSON_DATE.
-- @return BSON_DATE table.
-- @usage ejdb.toDate({ year = 2013, month = 1, day = 1, hour = 0, sec = 1 })
-- @usage ejdb.toDate(1363705285431)
function ejdb.toDate(val) end

--- Converts current time into BSON_DATE.
function ejdb.toDateNow() end

--- Builds BSON_REGEX value
-- @tparam string re Regular expression
-- @tparam ?string opts Regular expression flags
-- @return BSON_REGEX table value
function ejdb.toRegexp(re, opts) end

--- Converts lua string into BSON_BINDATA value
-- @return BSON_BINDATA table value
function ejdb.toBinData(val) end

--- Builds BSON_NULL value
-- @return BSON_NULL table value
function ejdb.toNull() end

--- Builds BSON_UNDEFINED value
-- @return BSON_UNDEFINED table value
function ejdb.toUndefined() end

--- Converts string OID into BSON oid table.
-- @see ejdb.toOID
function DB.toOID(val) end

--- Converts os.time table or number of secods integer into BSON_DATE.
-- @see ejdb.toDate
function DB.toDate(val) end

--- Converts current time into BSON_DATE.
-- @see ejdb.toDateNow
function DB.toDateNow() end

--- Builds BSON_REGEX value.
-- @see ejdb.toRegexp
function DB.toRegexp(re, opts) end

--- Converts lua string into BSON_BINDATA value.
-- @see ejdb.toBinData
function DB.toBinData(val) end

--- Builds BSON_NULL value.
-- @see ejdb.toNull
function DB.toNull() end

--- Builds BSON_UNDEFINED value .
-- @see ejdb.toUndefined
function DB.toUndefined() end

--- Returns EJDB version string eg: "1.1.14"
function DB.version() end

--- Save/update specified JSON objects in the collection.
-- If collection with `cname` does not exists it will be created.
-- Each persistent object has unique identifier (OID) placed in the `_id` property.
-- If a saved object does not have `_id` it will be autogenerated.
-- To identify and update object it should contains `_id` property.
-- @tparam string cname Collection name.
-- @tparam table|Q obj represents JSON object.
-- @param ... If last argument is True a saved object will be merged with who's
-- already persisted in db.
-- @usage dQ:save("parrots2", {foo = "bar"})
-- @usage dQ:save("parrots2", Q("foo", "bar"), true) -- merge option is on
function DB:save(cname, obj, ...) end

--- Loads JSON object identified by OID from the collection.
-- @tparam string cname Collection name
-- @tparam string|table oid 24 hex chars BSON_OID or BSON oid table
function DB:load(cname, oid) end

--- Executes ejdb command.
--
-- @usage
-- Supported commands:
--    1) Exports database collections data. See ejdbexport() method.
--
--      "export" : {
--            "path" : string,                    //Exports database collections data
--            "cnames" : [string array]|null,     //List of collection names to export
--            "mode" : int|null                   //Values: null|`JBJSONEXPORT` See ejdb.h#ejdbexport() method
--      }
--
--      Command response:
--         {
--            "log" : string,        //Diagnostic log about executing this command
--            "error" : string|null, //ejdb error message
--            "errorCode" : int|0,   //ejdb error code
--         }
--
--    2) Imports previously exported collections data into ejdb.
--
--      "import" : {
--            "path" : string                     //The directory path in which data resides
--            "cnames" : [string array]|null,     //List of collection names to import
--            "mode" : int|null                //Values: null|`JBIMPORTUPDATE`|`JBIMPORTREPLACE` See ejdb.h#ejdbimport() method
--       }
--
--       Command response:
--         {
--            "log" : string,        //Diagnostic log about executing this command
--            "error" : string|null, //ejdb error message
--            "errorCode" : int|0,   //ejdb error code
--         }
-- @tparam table|Q cmd Command object.
-- @return Command response table
function DB:command(cmd) end

--- Execute query on collection.
--
-- EJDB queries inspired by MongoDB (mongodb.org) and follows same philosophy.
-- Queries and query hints can be constructed by @{Q} query/json builder.
--
-- See <a href="http://ejdb.org">http://ejdb.org</a> query language documetation.
-- 
-- @usage
-- To traverse selected records cursor object is returned.
-- Cursor (res):
--    #res - length of result set
--    res[i] - BSON representations of object as lua string
--    res:object(i) - Lua table constructed from BSON data
--    res:field(i, <field name>) - Lua value of fetched BSON object
--    res() - Creates iterator for pairs (obj, idx)
--          where obj - Lua table constructed from BSON data
--                idx - Index of fetched object in the result set
-- Examples:
--    for i = 1, #res do
--      local ob = res:object(i)
--      ...
--    end
--
-- OR
--
--    for i = 1, #res do
--      res:field(i, "json field name")
--      ...
--    end
--
-- OR
--
--    for vobj, idx in res() do
--      -- vobj is a lua table representation of fetched json object
--      vobj["json field name"]
--      ...
--    end
--
-- @tparam string cname Collection name
-- @tparam Q q JSON query object
-- @string flags Query control flags:
--    `c`: only count of matching records will be returned without placing records in result set.
--    `l`: return query execution log
-- @treturn RS result set, it will be `nil` if `c` flag presented in the control `flags`
-- @treturn number Count of matched/updated records
-- @treturn ?string Query execution log if `l` flag presented in the control `flags`
-- @usage db:find("mycoll", Q("foo", "bar")) => {"foo" : "bar"}
-- @usage db:find("mycoll", Q("foo", "bar"):Max(10)) -- Limit results up to 10 records
-- @usage db:find("parrots2", Q("likes", "toys"):OrderBy("name asc", "age desc"))
-- @usage db:find("parrots2", Q():F("likes"):Eq("toys"):OrderBy({ name = 1 }, { age = -1 }))
-- @see Q
--
function DB:find(cname, q, flags) end

--- Same as @{DB:find} but retrieves only first matching JSON object.
-- @tparam string cname Collection name
-- @tparam Q q JSON query object
-- @treturn table Lua table constructed from matched BSON record or `nil` of record not found
-- @treturn number Count of matched/updated records
-- @treturn ?string Query execution log if `l` flag presented in the control `flags`

function DB:findOne(cname, q, ...) end

--- Convenient method to execute update queries.
-- @tparam string cname Collection name
-- @tparam Q q JSON query object
-- @treturn number Count of matched/updated records
-- @treturn ?string Query execution log if `l` flag presented in the control `flags`

function DB:update(cname, q, ...) end

--- Convenient `count(*)` operation.
-- @tparam string cname Collection name
-- @tparam Q q JSON query object
-- @treturn number Count of matched/updated records
-- @treturn ?string Query execution log if `l` flag presented in the control `flags`

function DB:count(cname, q, ...) end

--- Synchronize EJDB database with storage.
-- If `cname` is provided only this collection will be synced.
-- @tparam ?string cname Collection name
function DB:sync(cname) end


--- Get table object describes a database structure and its collections.
--
-- @usage
-- Sample meta:
--
--    collections = {
--      ecoll = {
--        file = "testdb_ecoll",
--        indexes = {},
--        name = "ecoll",
--        options = {
--          buckets = 425977,
--          cachedrecords = 0,
--          compressed = false,
--          large = true
--        },
--        records = 1
--      },
--      mycoll = {
--        file = "testdb_mycoll",
--        indexes = { {
--            field = "foo",
--            file = "testdb_mycoll.idx.sfoo.lex",
--            iname = "sfoo",
--            records = 3,
--            type = "lexical"
--          } },
--        name = "mycoll",
--        options = {
--          buckets = 131071,
--          cachedrecords = 0,
--          compressed = false,
--          large = false
--        },
--        records = 4
--      }
--    },
--    file = "testdb"
--
-- @treturn table Database metadata
function DB:getDBMeta() end

--- Begin collection transaction.
-- @tparam string cname Collection name
function DB:beginTransaction() end

--- Commit collection transaction.
-- @tparam string cname Collection name
function DB:commitTransaction() end

--- Rollback collection transaction.
-- @tparam string cname Collection name
function DB:rollbackTransaction() end

--- Get collection transaction status.
-- Returns `True` if transaction is active.
-- @tparam string cname Collection name
-- @treturn bool
function DB:getTransactionStatus() end

--- DROP indexes of all types for JSON field path.
-- @string cname Collection name
-- @string fpath JSON field path for index
function DB:dropIndexes(cname, fpath) end

--- OPTIMIZE indexes of all types for JSON field path.
-- Performs B+ tree index file optimization.
-- @string cname Collection name
-- @string fpath JSON field path for index
function DB:optimizeIndexes(cname, fpath) end

--- Ensure index presence of String type for JSON field path.
-- @string cname Collection name
-- @string fpath JSON field path for index
function DB:ensureStringIndex(cname, fpath) end

--- Rebuild index of String type for JSON field path.
-- @string cname Collection name
-- @string fpath JSON field path for index
function DB:rebuildStringIndex(cname, fpath) end

--- Drop index of String type for JSON field path.
-- @string cname Collection name
-- @string fpath JSON field path for index
function DB:dropStringIndex(cname, fpath) end

--- Ensure case insensitive String index for JSON field path.
-- @string cname Collection name
-- @string fpath JSON field path for index
function DB:ensureIStringIndex(cname, fpath) end

--- Rebuild case insensitive String index for JSON field path.
-- @string cname Collection name
-- @string fpath JSON field path for index
function DB:rebuildIStringIndex(cname, fpath) end

--- Drop case insensitive String index for JSON field path.
-- @string cname Collection name
-- @string fpath JSON field path for index
function DB:dropIStringIndex(cname, fpath) end

--- Ensure index presence of Number type for JSON field path.
-- @string cname Collection name
-- @string fpath JSON field path for index
function DB:ensureNumberIndex(cname, fpath) end

--- Rebuild index of Number type for JSON field path.
-- @string cname Collection name
-- @string fpath JSON field path for index
function DB:rebuildNumberIndex(cname, fpath) end

--- Drop index of Number type for JSON field path.
-- @string cname Collection name
-- @string fpath JSON field path for index
function DB:dropNumberIndex(cname, fpath) end

--- Ensure index presence of Array type for JSON field path.
-- @string cname Collection name
-- @string fpath JSON field path for index
function DB:ensureArrayIndex(cname, fpath) end

--- Rebuild index of Array type for JSON field path.
-- @string cname Collection name
-- @string fpath JSON field path for index
function DB:rebuildArrayIndex(cname, fpath) end

--- Drop index of Array type for JSON field path.
-- @string cname Collection name
-- @string fpath JSON field path for index
function DB:rebuildArrayIndex(cname, fpath) end

--- Returns result set lua table object at specified position `i`
-- @tparam number i Position of record in the result set
-- @treturn table Resulting lua object constructed from BSON record.
function RS:object(i) end

--- Returns field value of lua object at specified position `i`
-- @tparam number i Position of record in the result set
-- @tparam string name JSON field name
-- @return Value of field
function RS:field(i, name) end

--- Length of result set.
function RS.__len() end


--- Adds field into current JSON object.
-- @usage Q():KV("foo", "bar"):KV("age", 30) => {"foo" : "bar", "age" : 30}
function Q:KV(key, value) end

--- Set current field for the next operation during query building.
-- @string fname JSON field path
-- @usage Q:F("name"):Eq("andy"):F("age"):Gt(30) => {"name" : "andy", "age" : {"$gt" : 30}}
function Q:F(fname) end

--- Field equality restriction.
-- @param val any BSON value as Lua object including @{Q} instances.
-- All usage samples represent same thing: `{"fname" : fval}`
-- @usage Q():F("fname"):Eq(fval)
-- @usage Q("fname", fval)
-- @usage Q():F("fname", fval)
-- @return Self @{Q}
function Q:Eq(val) self:_setop(nil, val, nil, true) end

--- Element match construction.
-- - $elemMatch The $elemMatch operator matches more than one component within an array element.
-- -    { array: { $elemMatch: { value1 : 1, value2 : { $gt: 1 } } } }
-- Restriction: only one $elemMatch allowed in context of one array field.
-- @return Self @{Q}
function Q:ElemMatch(val) end

--- The $not negatiation for `val` block
-- @usage Q():Not(Q("foo", "bar")) => {"$not" : {"foo" : "bar"}}
-- @return Self @{Q}
function Q:Not(val) end

--- Greater than (val > arg)
-- @number val
-- @usage Q():F("age"):Gt(29) => {"age" : {"$gt" : 29}}
-- @return Self @{Q}
function Q:Gt(val) end

--- Greater than or equal (val >= arg)
-- @number val
-- @usage Q():F("age"):Gt(29) => {"age" : {"$gte" : 29}}
-- @return Self @{Q}
function Q:Gte(val) end

--- Lesser than (val < arg)
-- @number val
-- @usage Q():F("age"):Lt(29) => {"age" : {"$lt" : 29}}
-- @return Self @{Q}
function Q:Lt(val) end

--- Lesser than or equal (val <= arg)
-- @number val
-- @usage Q():F("age"):Lt(29) => {"age" : {"$lte" : 29}}
-- @return Self @{Q}
function Q:Lte(val) end

--- Case insensitive string matching
-- @tparam string|table|Q val
-- @usage Q():F("name"):Icase("aNdY") => {"name" : {"$icase" : "aNdY"}}
-- @usage Q():F("name"):Icase({[$in] = {"aNdY", "AnTon"}}) => {"name" : {"$icase" : {"$in" : ["aNdY", "AnTon"]}}}
-- @return Self @{Q}
function Q:Icase(val) end

--- String starts with prefix
-- @string val
-- @usage Q():F("fpath"):Begin("prefix") => {"fpath" : {"$begin" : "prefix"}}
-- @return Self @{Q}
function Q:Begin(val) end

--- Field value matched any value of specified in `val` table.
-- @tparam table val  Not empty lua array of values.
-- @usage Q():F("fpath"):In({"val1", "val2", "val3"}) => {"fpath" : {"$in" : ["val1", "val2", "val3"]}}
-- @return Self @{Q}
function Q:In(val) end

--- Negation of @{Q:In}
-- @see Q:In
-- @return Self @{Q}
function Q:NotIn(val) end

--- Between for number types
-- @number n1
-- @number n2
-- @usage Q():F("age"):Bt(10, 20) => {"age" : {"$bt" : [10, 20]}}
-- @return Self @{Q}
function Q:Bt(n1, n2) end

--- String tokens(or string array vals) matches **all** tokens in specified `val` array.
-- @tparam table val Array of tokens to match.
-- @usage Q():F("description"):StrAnd({"foo", "bar"}) -- descripton contains all tokens: 'foo' and 'bar'
-- @return Self @{Q}
function Q:StrAnd(val) end

--- String tokens(or string array vals) matches **any** token in specified array.
-- @tparam table val Array of tokens to match.
-- @usage Q():F("description"):StrOr({"foo", "bar"}) -- descripton contains all tokens: 'foo' or 'bar'
-- @return Self @{Q}
function Q:StrOr(val) end

--- Increment current field. Only number types are supported.
-- @number val
-- @usage Q():F("count"):Inc(1):F("age"):Inc(-20) => {"$inc" : {"count" : 1, "age" : -20}}
-- @return Self @{Q}
-- @see Q:F
function Q:Inc(val) end

--- Set fields to values.
-- @tparam table|Q val Table of fields to set
-- @usage Q():Set({age = 20, count = 1}) => {"$set" : {"age" : 20, count : 1}}
-- @return Self @{Q}
function Q:Set(val) end

--- Atomic upsert.
-- If matching records are found it will be `$set` operation,
-- otherwise new record will be inserted with fields specified by `val` table.
-- @tparam table|Q val Table of fields to set/insert
-- Insert {"foo" : "bar"} if this object does not exists:
-- @usage Q("foo","bar"):Upsert(Q("foo", "bar")) => {"foo" : "bar", "$upsert" : {"foo" : "bar"}}
-- @usage Q("foo","bar"):Upsert({foo ="bar"}) => {"foo" : "bar", "$upsert" : {"foo" : "bar"}}
-- @return Self @{Q}
function Q:Upsert(val) end

--- Atomically adds `val` to the `array field` only if `val` not in the array already.
-- If containing array is missing it will be created.
-- @param val Value to add
-- @usage Q():F("tags"):AddToSet("red") => {"$addToSet" : {"tags" : "red"}}
-- @return Self @{Q}
function Q:AddToSet(val) end

--- Atomically performs `set union` with values in `val` for specified array field.
-- @tparam table val Array of values to add
-- @usage Q():F("tags"):AddToSetAll({"red", "green"})
-- @see Q:F
-- @return Self @{Q}
function Q:AddToSetAll(val) end

--- Atomically removes all occurrences of `val` from field, if field is an array.
-- @param val Value to remove
-- @usage Q():F("tags"):Pull("red") => {"$pull" : {"tags" : "red"}}
-- @see Q:F
-- @return Self @{Q}
function Q:Pull(val) end

--- Atomically performs `set substraction` of values in `val` for specified array field.
-- @tparam table val Array of values to remove from array field
-- @usage Q():F("tags"):PullAll({"red", "green"}) => {"$pullAll" : {"tags" : ["red", "green"]}}
-- @see Q:F
-- @return Self @{Q}
function Q:PullAll(val) end

--- In-place record removal operation.
-- @usage db:update(Q():F("name", "andy"):DropAll()) -- Removes all records with name eq 'andy'
-- @return Self @{Q}
function Q:DropAll() end

--- Make <a href="https://github.com/Softmotions/ejdb/wiki/Collection-joins">collection join</a>
-- for select queries.
-- @string cname Name for joined collection
-- @string fpath Name of field with BSON OIDs of joined objects
-- @return Self @{Q}
function Q:Join(cname, fpath) end

--- Add *OR* joined query restrictions.
-- @tparam table|Q ... List of OR joined restrictions
-- @usage Q():Or(Q("name", "anton"), Q("name", "andy"))
--    Find records with "name" field eq "anton" or "andy"
-- @return Self @{Q}
function Q:Or(...) end

--- Sets number of skipped records in the result set.
-- @number val
-- @return Self @{Q}
function Q:Skip(val) end

--- Sets max number of records in the result set.
-- @number val
-- @return Self @{Q}
function Q:Max(val) end

--- Set sorting rules for query results.
-- tparam table|string
-- @usage Q:OrderBy("name asc", "age desc") => ORDER BY name ASC, age dESC
-- @usage Q:OrderBy({name = 1}, {age = -1}) => ORDER BY name ASC, age dESC
function Q:OrderBy(...) end

--- Sets fields to be included in resulting objects.
-- If field presented in $orderby clause it will be forced to include in resulting records.
-- @string ... Fields to be included in fetched objects.
-- @usage Q:Fields("name", "age")
-- @return Self @{Q}
function Q:Fields(...) end

--- Sets fields to be excluded from resulting objects.
-- @string ... Fields to be excluded from fetched objects.
-- @usage Q:NotFields("name", "description")
-- @return Self @{Q}
function Q:NotFields(...) end








